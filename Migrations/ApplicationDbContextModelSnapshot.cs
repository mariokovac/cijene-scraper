// <auto-generated />
using System;
using CijeneScraper.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CijeneScraper.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CijeneScraper.Models.Database.Chain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Chains");
                });

            modelBuilder.Entity("CijeneScraper.Models.Database.ChainProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Quantity")
                        .HasColumnType("text");

                    b.Property<string>("UOM")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChainId");

                    b.ToTable("ChainProducts");
                });

            modelBuilder.Entity("CijeneScraper.Models.Database.Price", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AnchorPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("BestPrice30")
                        .HasColumnType("numeric");

                    b.Property<long>("ChainProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<decimal?>("MPC")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PricePerUnit")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SpecialPrice")
                        .HasColumnType("numeric");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ChainProductId" }, "IX_Prices_ChainProductId");

                    b.HasIndex(new[] { "Date" }, "IX_Prices_Date");

                    b.HasIndex(new[] { "Date", "ChainProductId", "StoreId" }, "IX_Prices_Date_ChainProduct_Store");

                    b.HasIndex(new[] { "StoreId" }, "IX_Prices_StoreId");

                    b.HasIndex(new[] { "ChainProductId", "StoreId", "Date" }, "UX_Prices_Product_Store_Date")
                        .IsUnique();

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("CijeneScraper.Models.Database.Store", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChainId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("CijeneScraper.Models.Database.ChainProduct", b =>
                {
                    b.HasOne("CijeneScraper.Models.Database.Chain", "Chain")
                        .WithMany("Products")
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("CijeneScraper.Models.Database.Price", b =>
                {
                    b.HasOne("CijeneScraper.Models.Database.ChainProduct", "ChainProduct")
                        .WithMany("Prices")
                        .HasForeignKey("ChainProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CijeneScraper.Models.Database.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChainProduct");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("CijeneScraper.Models.Database.Store", b =>
                {
                    b.HasOne("CijeneScraper.Models.Database.Chain", "Chain")
                        .WithMany()
                        .HasForeignKey("ChainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chain");
                });

            modelBuilder.Entity("CijeneScraper.Models.Database.Chain", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CijeneScraper.Models.Database.ChainProduct", b =>
                {
                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
